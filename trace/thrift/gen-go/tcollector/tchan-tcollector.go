// Autogenerated. Code generated by thrift-gen. Do not modify.

// Package tcollector is generated code used to make or handle TChannel calls using Thrift.
package tcollector

import (
	"fmt"
	"io"

	athrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/tchannel-go"
	"github.com/uber/tchannel-go/thrift"
)

// Used to avoid unused warnings for non-streaming services.
var _ = tchannel.NewChannel
var _ = io.Reader(nil)

// Interfaces for the service and client for the services defined in the IDL.

// TChanTCollector is the interface containing non-streaming methods.
type TChanTCollector interface {
	MultiSubmit(ctx thrift.Context, spans []*Span) ([]*Response, error)
	Submit(ctx thrift.Context, span *Span) (*Response, error)
}

// TChanTCollectorServer is the interface that must be implemented by a handler.
type TChanTCollectorServer interface {
	MultiSubmit(ctx thrift.Context, spans []*Span) ([]*Response, error)
	Submit(ctx thrift.Context, span *Span) (*Response, error)
}

// TChanTCollectorClient is the interface is used to make remote calls.
type TChanTCollectorClient interface {
	MultiSubmit(ctx thrift.Context, spans []*Span) ([]*Response, error)
	Submit(ctx thrift.Context, span *Span) (*Response, error)
}

// Implementation of a client and service handler.

type tchanTCollectorClient struct {
	thriftService string
	client        thrift.TChanStreamingClient
}

func newTChanTCollectorClient(thriftService string, client thrift.TChanStreamingClient) *tchanTCollectorClient {
	return &tchanTCollectorClient{
		thriftService,
		client,
	}
}

// NewTChanTCollectorClient creates a client that can be used to make remote calls.
func NewTChanTCollectorClient(client thrift.TChanStreamingClient) TChanTCollectorClient {
	return newTChanTCollectorClient("TCollector", client)
}

func (c *tchanTCollectorClient) MultiSubmit(ctx thrift.Context, spans []*Span) ([]*Response, error) {
	var resp TCollectorMultiSubmitResult
	args := TCollectorMultiSubmitArgs{
		Spans: spans,
	}
	success, err := c.client.Call(ctx, c.thriftService, "multi_submit", &args, &resp)
	if err == nil && !success {
	}

	return resp.GetSuccess(), err
}

func (c *tchanTCollectorClient) Submit(ctx thrift.Context, span *Span) (*Response, error) {
	var resp TCollectorSubmitResult
	args := TCollectorSubmitArgs{
		Span: span,
	}
	success, err := c.client.Call(ctx, c.thriftService, "submit", &args, &resp)
	if err == nil && !success {
	}

	return resp.GetSuccess(), err
}

type tchanTCollectorServer struct {
	handler TChanTCollectorServer
	common  thrift.TCommon
}

func newTChanTCollectorServer(handler TChanTCollectorServer) *tchanTCollectorServer {
	return &tchanTCollectorServer{
		handler,
		nil, /* common */
	}
}

// NewTChanTCollectorServer wraps a handler for TChanTCollectorServer so it can be
// registered with a thrift.Server.
func NewTChanTCollectorServer(handler TChanTCollectorServer) thrift.TChanStreamingServer {
	return newTChanTCollectorServer(handler)
}

func (s *tchanTCollectorServer) Service() string {
	return "TCollector"
}

func (s *tchanTCollectorServer) SetCommon(common thrift.TCommon) {
	s.common = common
}

func (s *tchanTCollectorServer) Methods() []string {
	return []string{
		"multi_submit",
		"submit",
	}
}

func (s *tchanTCollectorServer) StreamingMethods() []string {
	return []string{}
}

func (s *tchanTCollectorServer) HandleStreaming(ctx thrift.Context, call *tchannel.InboundCall) error {
	methodName := string(call.Operation())
	return fmt.Errorf("method %v not found in service %v", methodName, s.Service())
}

func (s *tchanTCollectorServer) Handle(ctx thrift.Context, methodName string, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	switch methodName {
	case "multi_submit":
		return s.handleMultiSubmit(ctx, protocol)
	case "submit":
		return s.handleSubmit(ctx, protocol)

	default:
		return false, nil, fmt.Errorf("method %v not found in service %v", methodName, s.Service())
	}
}

func (s *tchanTCollectorServer) handleMultiSubmit(ctx thrift.Context, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	var req TCollectorMultiSubmitArgs
	var res TCollectorMultiSubmitResult

	if err := req.Read(protocol); err != nil {
		return false, nil, err
	}

	r, err :=
		s.handler.MultiSubmit(ctx, req.Spans)

	if err != nil {
		return false, nil, err
	} else {
		res.Success = r
	}

	return err == nil, &res, nil
}

func (s *tchanTCollectorServer) handleSubmit(ctx thrift.Context, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	var req TCollectorSubmitArgs
	var res TCollectorSubmitResult

	if err := req.Read(protocol); err != nil {
		return false, nil, err
	}

	r, err :=
		s.handler.Submit(ctx, req.Span)

	if err != nil {
		return false, nil, err
	} else {
		res.Success = r
	}

	return err == nil, &res, nil
}
