// Autogenerated. Code generated by thrift-gen. Do not modify.
package stream

import (
	"fmt"

	athrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/tchannel-go/thrift"
)

// Interfaces for the service and client for the services defined in the IDL.

type TChanTestStream interface {
}

// TChanTestStreamServer is the interface that must be implemented by a handler.
type TChanTestStreamServer interface {
	BothStream(ctx thrift.Context, call *TestStreamBothStreamInCall) error
	OutStream(ctx thrift.Context, prefix string, call *TestStreamOutStreamInCall) error
}

// TChanTestStreamClient is the interface is used to make remote calls.
type TChanTestStreamClient interface {
	BothStream(ctx thrift.Context) (*TestStreamBothStreamOutCall, error)
	OutStream(ctx thrift.Context, prefix string) (*TestStreamOutStreamOutCall, error)
}

type TChanTestStream2 interface {
	TChanTestStream
}

// TChanTestStream2Server is the interface that must be implemented by a handler.
type TChanTestStream2Server interface {
	TChanTestStreamServer

	OutStream2(ctx thrift.Context, prefix string, call *TestStream2OutStream2InCall) error
}

// TChanTestStream2Client is the interface is used to make remote calls.
type TChanTestStream2Client interface {
	TChanTestStreamClient

	OutStream2(ctx thrift.Context, prefix string) (*TestStream2OutStream2OutCall, error)
}

// Implementation of a client and service handler.

type tchanTestStreamClient struct {
	thriftService string
	client        thrift.TChanClient
}

func newTChanTestStreamClient(thriftService string, client thrift.TChanClient) *tchanTestStreamClient {
	return &tchanTestStreamClient{
		thriftService,
		client,
	}
}

func NewTChanTestStreamClient(client thrift.TChanClient) TChanTestStream {
	return newTChanTestStreamClient("TestStream", client)
}

type tchanTestStreamServer struct {
	handler TChanTestStream
}

func newTChanTestStreamServer(handler TChanTestStream) *tchanTestStreamServer {
	return &tchanTestStreamServer{
		handler,
	}
}

func NewTChanTestStreamServer(handler TChanTestStream) thrift.TChanServer {
	return newTChanTestStreamServer(handler)
}

func (s *tchanTestStreamServer) Service() string {
	return "TestStream"
}

func (s *tchanTestStreamServer) Methods() []string {
	return []string{}
}

func (s *tchanTestStreamServer) Handle(ctx thrift.Context, methodName string, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	switch methodName {

	default:
		return false, nil, fmt.Errorf("method %v not found in service %v", methodName, s.Service())
	}
}

type tchanTestStream2Client struct {
	tchanTestStreamClient

	thriftService string
	client        thrift.TChanClient
}

func newTChanTestStream2Client(thriftService string, client thrift.TChanClient) *tchanTestStream2Client {
	return &tchanTestStream2Client{
		*newTChanTestStreamClient(thriftService, client),
		thriftService,
		client,
	}
}

func NewTChanTestStream2Client(client thrift.TChanClient) TChanTestStream2 {
	return newTChanTestStream2Client("TestStream2", client)
}

type tchanTestStream2Server struct {
	tchanTestStreamServer

	handler TChanTestStream2
}

func newTChanTestStream2Server(handler TChanTestStream2) *tchanTestStream2Server {
	return &tchanTestStream2Server{
		*newTChanTestStreamServer(handler),
		handler,
	}
}

func NewTChanTestStream2Server(handler TChanTestStream2) thrift.TChanServer {
	return newTChanTestStream2Server(handler)
}

func (s *tchanTestStream2Server) Service() string {
	return "TestStream2"
}

func (s *tchanTestStream2Server) Methods() []string {
	return []string{}
}

func (s *tchanTestStream2Server) Handle(ctx thrift.Context, methodName string, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	switch methodName {

	default:
		return false, nil, fmt.Errorf("method %v not found in service %v", methodName, s.Service())
	}
}
