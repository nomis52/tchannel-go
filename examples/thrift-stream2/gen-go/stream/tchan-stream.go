// Autogenerated. Code generated by thrift-gen. Do not modify.
package stream

import (
	"fmt"

	athrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/tchannel-go/thrift"
)

// Interfaces for the service and client for the services defined in the IDL.

type TChanUniqC interface {
}

// TChanUniqCServer is the interface that must be implemented by a handler.
type TChanUniqCServer interface {
	Run(ctx thrift.Context, call *UniqCRunInCall) error
}

// TChanUniqCClient is the interface is used to make remote calls.
type TChanUniqCClient interface {
	Run(ctx thrift.Context) (*UniqCRunOutCall, error)
}

type TChanUniqC2 interface {
	TChanUniqC
}

// TChanUniqC2Server is the interface that must be implemented by a handler.
type TChanUniqC2Server interface {
	TChanUniqCServer

	Fakerun(ctx thrift.Context, call *UniqC2FakerunInCall) error
}

// TChanUniqC2Client is the interface is used to make remote calls.
type TChanUniqC2Client interface {
	TChanUniqCClient

	Fakerun(ctx thrift.Context) (*UniqC2FakerunOutCall, error)
}

// Implementation of a client and service handler.

type tchanUniqCClient struct {
	thriftService string
	client        thrift.TChanClient
}

func newTChanUniqCClient(thriftService string, client thrift.TChanClient) *tchanUniqCClient {
	return &tchanUniqCClient{
		thriftService,
		client,
	}
}

func NewTChanUniqCClient(client thrift.TChanClient) TChanUniqC {
	return newTChanUniqCClient("UniqC", client)
}

type tchanUniqCServer struct {
	handler TChanUniqC
}

func newTChanUniqCServer(handler TChanUniqC) *tchanUniqCServer {
	return &tchanUniqCServer{
		handler,
	}
}

func NewTChanUniqCServer(handler TChanUniqC) thrift.TChanServer {
	return newTChanUniqCServer(handler)
}

func (s *tchanUniqCServer) Service() string {
	return "UniqC"
}

func (s *tchanUniqCServer) Methods() []string {
	return []string{}
}

func (s *tchanUniqCServer) Handle(ctx thrift.Context, methodName string, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	switch methodName {

	default:
		return false, nil, fmt.Errorf("method %v not found in service %v", methodName, s.Service())
	}
}

type tchanUniqC2Client struct {
	tchanUniqCClient

	thriftService string
	client        thrift.TChanClient
}

func newTChanUniqC2Client(thriftService string, client thrift.TChanClient) *tchanUniqC2Client {
	return &tchanUniqC2Client{
		*newTChanUniqCClient(thriftService, client),
		thriftService,
		client,
	}
}

func NewTChanUniqC2Client(client thrift.TChanClient) TChanUniqC2 {
	return newTChanUniqC2Client("UniqC2", client)
}

type tchanUniqC2Server struct {
	tchanUniqCServer

	handler TChanUniqC2
}

func newTChanUniqC2Server(handler TChanUniqC2) *tchanUniqC2Server {
	return &tchanUniqC2Server{
		*newTChanUniqCServer(handler),
		handler,
	}
}

func NewTChanUniqC2Server(handler TChanUniqC2) thrift.TChanServer {
	return newTChanUniqC2Server(handler)
}

func (s *tchanUniqC2Server) Service() string {
	return "UniqC2"
}

func (s *tchanUniqC2Server) Methods() []string {
	return []string{}
}

func (s *tchanUniqC2Server) Handle(ctx thrift.Context, methodName string, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	switch methodName {

	default:
		return false, nil, fmt.Errorf("method %v not found in service %v", methodName, s.Service())
	}
}
